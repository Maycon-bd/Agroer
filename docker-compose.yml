services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: agroer_postgres
    environment:
      POSTGRES_DB: Agroer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/create_database.sql:/docker-entrypoint-initdb.d/create_database.sql
    networks:
      - agroer_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d Agroer"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin para gerenciamento do banco
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: agroer_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@agroer.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - agroer_network
    depends_on:
      - postgres

  # Agente1 - Processamento PDF
  agente1:
    build:
      context: ./agente1
      dockerfile: Dockerfile
    container_name: agroer_agente1
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - FRONTEND_URL=http://frontend:5173
      - GOOGLE_GEMINI_API_KEY=${GOOGLE_GEMINI_API_KEY}
      - MAX_FILE_SIZE=10485760
      - UPLOAD_DIR=/app/uploads
    volumes:
      - agente1_uploads:/app/uploads
    networks:
      - agroer_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agente2 - Validação e Banco
  agente2:
    build:
      context: ./agente2
      dockerfile: Dockerfile
    container_name: agroer_agente2
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=Agroer
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - FRONTEND_URL=http://frontend:5173
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    networks:
      - agroer_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agroer_frontend
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_AGENTE1_URL=http://localhost:3001
      - VITE_AGENTE2_URL=http://localhost:3002
    networks:
      - agroer_network
    depends_on:
      - agente1
      - agente2
    restart: unless-stopped

volumes:
  postgres_data:
  pgadmin_data:
  agente1_uploads:

networks:
  agroer_network:
    driver: bridge